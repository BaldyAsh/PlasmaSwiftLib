{"Typealiases.html#/TreeHashFunction":{"name":"TreeHashFunction","abstract":"<p>Hash function is some func with Data parameter that returns Data</p>"},"Structs/TransactionOutput.html#/outputNumberInTx":{"name":"outputNumberInTx","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/receiverEthereumAddress":{"name":"receiverEthereumAddress","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/amount":{"name":"amount","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/data":{"name":"data","abstract":"<p>Returns serialized TransactionOutput</p>","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/init(outputNumberInTx:receiverEthereumAddress:amount:)":{"name":"init(outputNumberInTx:receiverEthereumAddress:amount:)","abstract":"<p>Creates TransactionOutput object that can be spent as an input in a new transaction</p>","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates TransactionOutput object that can be spent as an input in a new transaction</p>","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes TransactionOutput</p>","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/prepareForRLP()":{"name":"prepareForRLP()","abstract":"<p>Plases TransactionOutput items in AnyObject array</p>","parent_name":"TransactionOutput"},"Structs/TransactionOutput.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"TransactionOutput"},"Structs/TransactionInput.html#/blockNumber":{"name":"blockNumber","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/txNumberInBlock":{"name":"txNumberInBlock","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/outputNumberInTx":{"name":"outputNumberInTx","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/amount":{"name":"amount","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/data":{"name":"data","abstract":"<p>Returns serialized TransactionInput</p>","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/init(blockNumber:txNumberInBlock:outputNumberInTx:amount:)":{"name":"init(blockNumber:txNumberInBlock:outputNumberInTx:amount:)","abstract":"<p>Creates TransactionInput object</p>","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates TransactionInput object</p>","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes TransactionInput</p>","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/prepareForRLP()":{"name":"prepareForRLP()","abstract":"<p>Plases TransactionInput items in AnyObject array</p>","parent_name":"TransactionInput"},"Structs/TransactionInput.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"TransactionInput"},"Structs/SignedTransaction.html#/transaction":{"name":"transaction","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/v":{"name":"v","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/r":{"name":"r","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/s":{"name":"s","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/data":{"name":"data","abstract":"<p>Returns serialized SignedTransaction</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/sender":{"name":"sender","abstract":"<p>Returns EthereumAddress of SignedTransaction sender</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/init()":{"name":"init()","abstract":"<p>SignedTransaction with null type Transaction init</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/init(transaction:v:r:s:)":{"name":"init(transaction:v:r:s:)","abstract":"<p>Creates SignedTransaction object that implement signed transaction in Plasma</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates SignedTransaction object that implement signed transaction in Plasma</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/prepareForRLP()":{"name":"prepareForRLP()","abstract":"<p>Plases SignedTransaction items in AnyObject array</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes SignedTransaction</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/recoverSender()":{"name":"recoverSender()","abstract":"<p>Deduces a sender from transaction signature</p>","parent_name":"SignedTransaction"},"Structs/SignedTransaction.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"SignedTransaction"},"Structs/PlasmaParser.html#/parse(_:)":{"name":"parse(_:)","abstract":"<p>Parse data to PlasmaCode</p>","parent_name":"PlasmaParser"},"Structs/PlasmaParser.html#/setTargetAddress(address:)":{"name":"setTargetAddress(address:)","abstract":"<p>Sets target address</p>","parent_name":"PlasmaParser"},"Structs/PlasmaCode/PlasmaParameter.html#/type":{"name":"type","parent_name":"PlasmaParameter"},"Structs/PlasmaCode/PlasmaParameter.html#/value":{"name":"value","parent_name":"PlasmaParameter"},"Structs/PlasmaCode/PlasmaParameter.html":{"name":"PlasmaParameter","abstract":"<p>Additional Plasma parameter</p>","parent_name":"PlasmaCode"},"Structs/PlasmaCode.html#/txType":{"name":"txType","abstract":"<p>Plasma Transaction type</p>","parent_name":"PlasmaCode"},"Structs/PlasmaCode.html#/targetAddress":{"name":"targetAddress","abstract":"<p>Target address</p>","parent_name":"PlasmaCode"},"Structs/PlasmaCode.html#/chainID":{"name":"chainID","abstract":"<p>Network chainID</p>","parent_name":"PlasmaCode"},"Structs/PlasmaCode.html#/amount":{"name":"amount","abstract":"<p>Plasma Transaction amount</p>","parent_name":"PlasmaCode"},"Structs/PlasmaCode.html#/init(_:txType:)":{"name":"init(_:txType:)","abstract":"<p>Creates PlasmaCode object</p>","parent_name":"PlasmaCode"},"Structs/PlasmaErrors/StructureErrors.html#/cantDecodeData":{"name":"cantDecodeData","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/cantEncodeData":{"name":"cantEncodeData","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/dataIsNotArray":{"name":"dataIsNotArray","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/isNotList":{"name":"isNotList","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/wrongDataCount":{"name":"wrongDataCount","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/isNotData":{"name":"isNotData","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/wrongBitWidth":{"name":"wrongBitWidth","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/wrongData":{"name":"wrongData","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/wrongKey":{"name":"wrongKey","parent_name":"StructureErrors"},"Structs/PlasmaErrors/StructureErrors.html#/wrongAddress":{"name":"wrongAddress","parent_name":"StructureErrors"},"Structs/PlasmaErrors/NetErrors.html#/cantCreateRequest":{"name":"cantCreateRequest","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/cantConvertTxData":{"name":"cantConvertTxData","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/noData":{"name":"noData","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/errorInListUTXOs":{"name":"errorInListUTXOs","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/errorInUTXOs":{"name":"errorInUTXOs","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/noAcceptedInfo":{"name":"noAcceptedInfo","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html#/badResponse":{"name":"badResponse","parent_name":"NetErrors"},"Structs/PlasmaErrors/NetErrors.html":{"name":"NetErrors","abstract":"<p>Errors with network</p>","parent_name":"PlasmaErrors"},"Structs/PlasmaErrors/StructureErrors.html":{"name":"StructureErrors","abstract":"<p>Errors with object</p>","parent_name":"PlasmaErrors"},"Structs/PlasmaContract.html#/plasmaAddress":{"name":"plasmaAddress","abstract":"<p>Plasma contract address</p>","parent_name":"PlasmaContract"},"Structs/PlasmaContract.html#/plasmaABI":{"name":"plasmaABI","abstract":"<p>Plasma contract ABI</p>","parent_name":"PlasmaContract"},"Structs/SimpleContent.html#/getHash(_:)":{"name":"getHash(_:)","parent_name":"SimpleContent"},"Structs/SimpleContent.html#/isEqualTo(_:)":{"name":"isEqualTo(_:)","parent_name":"SimpleContent"},"Structs/SimpleContent.html#/data":{"name":"data","parent_name":"SimpleContent"},"Structs/SimpleContent.html#/init(_:)":{"name":"init(_:)","parent_name":"SimpleContent"},"Structs/PaddabbleTree.html#/hasher":{"name":"hasher","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/content":{"name":"content","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/paddingElement":{"name":"paddingElement","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/root":{"name":"root","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/merkleRoot":{"name":"merkleRoot","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/init(_:_:)":{"name":"init(_:_:)","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/init(_:_:_:)":{"name":"init(_:_:_:)","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/assembleTree(_:)":{"name":"assembleTree(_:)","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/makeBinaryProof(_:)":{"name":"makeBinaryProof(_:)","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/verifyBinaryProof(content:proof:expectedRoot:)":{"name":"verifyBinaryProof(content:proof:expectedRoot:)","parent_name":"PaddabbleTree"},"Structs/PaddabbleTree.html#/verifyBinaryProof(content:proof:expectedRoot:hasher:)":{"name":"verifyBinaryProof(content:proof:expectedRoot:hasher:)","parent_name":"PaddabbleTree"},"Structs/BlockHeader.html#/blockNumber":{"name":"blockNumber","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/numberOfTxInBlock":{"name":"numberOfTxInBlock","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/parentHash":{"name":"parentHash","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/merkleRootOfTheTxTree":{"name":"merkleRootOfTheTxTree","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/v":{"name":"v","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/r":{"name":"r","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/s":{"name":"s","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/data":{"name":"data","abstract":"<p>Returns serialized Block Header</p>","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/init(blockNumber:numberOfTxInBlock:parentHash:merkleRootOfTheTxTree:v:r:s:)":{"name":"init(blockNumber:numberOfTxInBlock:parentHash:merkleRootOfTheTxTree:v:r:s:)","abstract":"<p>Creates BlockHeader object that implement Block header in Block object (first 137 bytes)</p>","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates BlockHeader object that implement Block header in Block object (first 137 bytes)</p>","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes BlockHeader</p>","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"BlockHeader"},"Structs/BlockHeader.html#/printElements()":{"name":"printElements()","abstract":"<p>Prinets elements of Block header</p>","parent_name":"BlockHeader"},"Structs/TreeContent.html#/getHash(_:)":{"name":"getHash(_:)","abstract":"<p>Hash of the Merkle tree content</p>","parent_name":"TreeContent"},"Structs/TreeContent.html#/isEqualTo(_:)":{"name":"isEqualTo(_:)","abstract":"<p>Checks if some Merkle tree content equal to another</p>","parent_name":"TreeContent"},"Structs/TreeContent.html#/data":{"name":"data","parent_name":"TreeContent"},"Structs/TreeContent.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"TreeContent"},"Structs/TreeContent.html":{"name":"TreeContent","abstract":"<p>Merkle Tree content</p>"},"Structs/BlockHeader.html":{"name":"BlockHeader","abstract":"<p>The header of Block (first 137 bytes)</p>"},"Structs/PaddabbleTree.html":{"name":"PaddabbleTree"},"Structs/SimpleContent.html":{"name":"SimpleContent"},"Structs/PlasmaContract.html":{"name":"PlasmaContract","abstract":"<p>Specifies Plasma Contract address and ABI</p>"},"Structs/PlasmaErrors.html":{"name":"PlasmaErrors","abstract":"<p>Specifies typical errors</p>"},"Structs/PlasmaCode.html":{"name":"PlasmaCode","abstract":"<p>A Plasma Code that contains all necessary information</p>"},"Structs/PlasmaParser.html":{"name":"PlasmaParser","abstract":"<p>A Plasma URL Parser</p>"},"Structs/SignedTransaction.html":{"name":"SignedTransaction","abstract":"<p>An RLP encoded set that describes signed Transaction. Signature is based on EthereumPersonalHash(RLPEncode(Transaction))</p>"},"Structs.html#/TransactionHelpers":{"name":"TransactionHelpers","abstract":"<p>Some helpful methods for Transaction</p>"},"Structs/TransactionInput.html":{"name":"TransactionInput","abstract":"<p>An RLP encoded set that describes input in Transaction</p>"},"Structs/TransactionOutput.html":{"name":"TransactionOutput","abstract":"<p>An RLP encoded set that describes output in Transaction</p>"},"Protocols/Hasher.html#/hash(_:)":{"name":"hash(_:)","parent_name":"Hasher"},"Protocols/TreeNodeProtocol.html#/data":{"name":"data","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/isLeaf":{"name":"isLeaf","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/leftChild":{"name":"leftChild","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/rightChild":{"name":"rightChild","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/parent":{"name":"parent","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/isEqualTo(_:)":{"name":"isEqualTo(_:)","parent_name":"TreeNodeProtocol"},"Protocols/TreeNodeProtocol.html#/getHash(_:)":{"name":"getHash(_:)","parent_name":"TreeNodeProtocol"},"Protocols/ContentProtocol.html#/data":{"name":"data","parent_name":"ContentProtocol"},"Protocols/ContentProtocol.html#/getHash(_:)":{"name":"getHash(_:)","parent_name":"ContentProtocol"},"Protocols/ContentProtocol.html#/isEqualTo(_:)":{"name":"isEqualTo(_:)","parent_name":"ContentProtocol"},"Protocols/ContentProtocol.html":{"name":"ContentProtocol"},"Protocols/TreeNodeProtocol.html":{"name":"TreeNodeProtocol"},"Protocols/Hasher.html":{"name":"Hasher","abstract":"<p>Hasher protocol</p>"},"Functions.html#/keccak256(_:)":{"name":"keccak256(_:)","abstract":"<p>Variable-bit hashes using the Keccak hash function</p>"},"Extensions/String.html#/fullRange":{"name":"fullRange","parent_name":"String"},"Extensions/String.html#/fullNSRange":{"name":"fullNSRange","parent_name":"String"},"Extensions/String.html#/index(of:)":{"name":"index(of:)","parent_name":"String"},"Extensions/String.html#/split(intoChunksOf:)":{"name":"split(intoChunksOf:)","parent_name":"String"},"Extensions/String.html#/leftPadding(toLength:withPad:)":{"name":"leftPadding(toLength:withPad:)","parent_name":"String"},"Extensions/String.html#/interpretAsBinaryData()":{"name":"interpretAsBinaryData()","parent_name":"String"},"Extensions/String.html#/hasHexPrefix()":{"name":"hasHexPrefix()","parent_name":"String"},"Extensions/String.html#/stripHexPrefix()":{"name":"stripHexPrefix()","parent_name":"String"},"Extensions/String.html#/addHexPrefix()":{"name":"addHexPrefix()","parent_name":"String"},"Extensions/String.html#/stripLeadingZeroes()":{"name":"stripLeadingZeroes()","parent_name":"String"},"Extensions/String.html#/matchingStrings(regex:)":{"name":"matchingStrings(regex:)","parent_name":"String"},"Extensions/String.html#/range(from:)":{"name":"range(from:)","parent_name":"String"},"Extensions/String.html#/asciiValue":{"name":"asciiValue","parent_name":"String"},"Extensions/NSRegularExpression.html#/indexOfNamedCaptureGroups()":{"name":"indexOfNamedCaptureGroups()","parent_name":"NSRegularExpression"},"Extensions/NSRegularExpression.html#/rangesOfNamedCaptureGroups(match:)":{"name":"rangesOfNamedCaptureGroups(match:)","parent_name":"NSRegularExpression"},"Extensions/NSRegularExpression.html#/captureGroups(string:options:)":{"name":"captureGroups(string:options:)","parent_name":"NSRegularExpression"},"Extensions/NSRegularExpression.html#/captureGroups(string:options:range:)":{"name":"captureGroups(string:options:range:)","parent_name":"NSRegularExpression"},"Extensions/Data.html#/init(fromArray:)":{"name":"init(fromArray:)","parent_name":"Data"},"Extensions/Data.html#/toArray(type:)":{"name":"toArray(type:)","parent_name":"Data"},"Extensions/Data.html#/constantTimeComparisonTo(_:)":{"name":"constantTimeComparisonTo(_:)","parent_name":"Data"},"Extensions/Data.html#/zero(_:)":{"name":"zero(_:)","parent_name":"Data"},"Extensions/Data.html#/randomBytes(length:)":{"name":"randomBytes(length:)","parent_name":"Data"},"Extensions/Data.html#/bitsInRange(_:_:)":{"name":"bitsInRange(_:_:)","parent_name":"Data"},"Extensions/Data.html#/setLengthLeft(_:isNegative:)":{"name":"setLengthLeft(_:isNegative:)","parent_name":"Data"},"Extensions/Data.html#/setLengthRight(_:isNegative:)":{"name":"setLengthRight(_:isNegative:)","parent_name":"Data"},"Extensions/BigInt.html#/toTwosComplement()":{"name":"toTwosComplement()","parent_name":"BigInt"},"Extensions/Array.html#/split(intoChunksOf:)":{"name":"split(intoChunksOf:)","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Extensions/BigInt.html":{"name":"BigInt"},"Extensions/Data.html":{"name":"Data"},"Extensions/NSRegularExpression.html":{"name":"NSRegularExpression"},"Extensions/String.html":{"name":"String"},"Enums/PlasmaContractMethod.html#/deposit":{"name":"deposit","parent_name":"PlasmaContractMethod"},"Enums/PlasmaContractMethod.html#/withdrawCollateral":{"name":"withdrawCollateral","parent_name":"PlasmaContractMethod"},"Enums/PlasmaContractMethod.html#/startExit":{"name":"startExit","parent_name":"PlasmaContractMethod"},"Enums/PlasmaContractMethod.html":{"name":"PlasmaContractMethod","abstract":"<p>Preset of Plasma Contract methods</p>"},"Global Variables.html#/blockNumberByteLength":{"name":"blockNumberByteLength"},"Global Variables.html#/blockNumberMaxWidth":{"name":"blockNumberMaxWidth"},"Global Variables.html#/txNumberInBlockByteLength":{"name":"txNumberInBlockByteLength"},"Global Variables.html#/txNumberInBlockMaxWidth":{"name":"txNumberInBlockMaxWidth"},"Global Variables.html#/outputNumberInTxByteLength":{"name":"outputNumberInTxByteLength"},"Global Variables.html#/outputNumberInTxMaxWidth":{"name":"outputNumberInTxMaxWidth"},"Global Variables.html#/amountByteLength":{"name":"amountByteLength"},"Global Variables.html#/amountMaxWidth":{"name":"amountMaxWidth"},"Global Variables.html#/receiverEthereumAddressByteLength":{"name":"receiverEthereumAddressByteLength"},"Global Variables.html#/receiverEthereumAddressMaxWidth":{"name":"receiverEthereumAddressMaxWidth"},"Global Variables.html#/txTypeByteLength":{"name":"txTypeByteLength"},"Global Variables.html#/txTypeMaxWidth":{"name":"txTypeMaxWidth"},"Global Variables.html#/vByteLength":{"name":"vByteLength"},"Global Variables.html#/vMaxWidth":{"name":"vMaxWidth"},"Global Variables.html#/rByteLength":{"name":"rByteLength"},"Global Variables.html#/rMaxWidth":{"name":"rMaxWidth"},"Global Variables.html#/sByteLength":{"name":"sByteLength"},"Global Variables.html#/sMaxWidth":{"name":"sMaxWidth"},"Global Variables.html#/inputsArrayMax":{"name":"inputsArrayMax"},"Global Variables.html#/outputsArrayMax":{"name":"outputsArrayMax"},"Global Variables.html#/numberOfTxInBlockByteLength":{"name":"numberOfTxInBlockByteLength"},"Global Variables.html#/numberOfTxInBlockMaxWidth":{"name":"numberOfTxInBlockMaxWidth"},"Global Variables.html#/parentHashByteLength":{"name":"parentHashByteLength"},"Global Variables.html#/parentHashMaxWidth":{"name":"parentHashMaxWidth"},"Global Variables.html#/merkleRootOfTheTxTreeByteLength":{"name":"merkleRootOfTheTxTreeByteLength"},"Global Variables.html#/merkleRootOfTheTxTreeMaxWidth":{"name":"merkleRootOfTheTxTreeMaxWidth"},"Global Variables.html#/blockHeaderByteLength":{"name":"blockHeaderByteLength"},"Global Variables.html#/emptyTx":{"name":"emptyTx"},"Classes/Transaction/TransactionType.html#/null":{"name":"null","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html#/fund":{"name":"fund","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html#/split":{"name":"split","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html#/merge":{"name":"merge","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html#/data":{"name":"data","abstract":"<p>Data representation of transaction type</p>","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html#/init(byte:)":{"name":"init(byte:)","abstract":"<p>Byte representation of transaction type</p>","parent_name":"TransactionType"},"Classes/Transaction/TransactionType.html":{"name":"TransactionType","abstract":"<p>The type of transaction can be:","parent_name":"Transaction"},"Classes/Transaction.html#/txType":{"name":"txType","parent_name":"Transaction"},"Classes/Transaction.html#/inputs":{"name":"inputs","parent_name":"Transaction"},"Classes/Transaction.html#/outputs":{"name":"outputs","parent_name":"Transaction"},"Classes/Transaction.html#/data":{"name":"data","abstract":"<p>Returns serialized unsigned Transaction</p>","parent_name":"Transaction"},"Classes/Transaction.html#/init()":{"name":"init()","abstract":"<p>Null type Transaction init</p>","parent_name":"Transaction"},"Classes/Transaction.html#/init(txType:inputs:outputs:)":{"name":"init(txType:inputs:outputs:)","abstract":"<p>Creates Transaction object that implement unsigned transaction in Plasma</p>","parent_name":"Transaction"},"Classes/Transaction.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates Transaction object that implement unsigned transaction in Plasma</p>","parent_name":"Transaction"},"Classes/Transaction.html#/sign(privateKey:useExtraEntropy:)":{"name":"sign(privateKey:useExtraEntropy:)","abstract":"<p>Performes signing of transaction</p>","parent_name":"Transaction"},"Classes/Transaction.html#/prepareForRLP()":{"name":"prepareForRLP()","abstract":"<p>Plases Transaction items in AnyObject array</p>","parent_name":"Transaction"},"Classes/Transaction.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes Transaction</p>","parent_name":"Transaction"},"Classes/Transaction.html#/mergeOutputs(untilMinAmount:)":{"name":"mergeOutputs(untilMinAmount:)","abstract":"<p>Merge outputs for minimum amount of one output. All outputs with amount less than min will be merged.</p>","parent_name":"Transaction"},"Classes/Transaction.html#/mergeOutputs(forMaxNumber:)":{"name":"mergeOutputs(forMaxNumber:)","abstract":"<p>Merge outputs for fixed number of outputs. Maximum is 3. Сombined outputs with a smaller amount.</p>","parent_name":"Transaction"},"Classes/Transaction.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"Transaction"},"Classes/Web3Service.html#/preparePlasmaContractWriteTx(method:value:parameters:extraData:)":{"name":"preparePlasmaContractWriteTx(method:value:parameters:extraData:)","abstract":"<p>Prepares transaction that writes to some method of Plasma Contract in Ethereum Blockchain. It is broadcasted to the network, processed by miners, and if valid, is published on the blockchain, consuming Ether.</p>","parent_name":"Web3Service"},"Classes/Web3Service.html#/preparePlasmaContractReadTx(method:value:parameters:extraData:)":{"name":"preparePlasmaContractReadTx(method:value:parameters:extraData:)","abstract":"<p>Prepares transaction that calls to some method of Plasma Contract in Ethereum Blockchain. A call is a local invocation of a contract method that does not broadcast or publish anything on the blockchain and it will not consume any Ether.</p>","parent_name":"Web3Service"},"Classes/Web3Service.html#/sendPlasmaContractTx(transaction:options:password:)":{"name":"sendPlasmaContractTx(transaction:options:password:)","abstract":"<p>Sends transaction in Ethereum blockchain to Plasma Contract. It is broadcasted to the network, processed by miners, and if valid, is published on the blockchain, consuming Ether.</p>","parent_name":"Web3Service"},"Classes/Web3Service.html#/callPlasmaContractTx(transaction:options:)":{"name":"callPlasmaContractTx(transaction:options:)","abstract":"<p>Calls some method of Plasma Contract. A call is a local invocation of a contract method that does not broadcast or publish anything on the blockchain and it will not consume any Ether.</p>","parent_name":"Web3Service"},"Classes/Web3Service.html#/startExitPlasma(transaction:proof:blockNumber:outputNumber:password:)":{"name":"startExitPlasma(transaction:proof:blockNumber:outputNumber:password:)","abstract":"<p>Method that completes withdraw funds from plasma, calling withdrawCollateral and startExit methods.</p>","parent_name":"Web3Service"},"Classes/Web3Service.html#/withdrawUTXO(utxo:onTestnet:password:)":{"name":"withdrawUTXO(utxo:onTestnet:password:)","abstract":"<p>Completed method to withdraw funds from plasma UTXO.</p>","parent_name":"Web3Service"},"Classes/PlasmaUTXOs.html#/blockNumber":{"name":"blockNumber","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/transactionNumber":{"name":"transactionNumber","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/outputNumber":{"name":"outputNumber","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/value":{"name":"value","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/init(json:)":{"name":"init(json:)","abstract":"<p>Init Plasma UTXO from json</p>","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/toTransactionInput()":{"name":"toTransactionInput()","abstract":"<p>Form Transaction Input from this UTXO</p>","parent_name":"PlasmaUTXOs"},"Classes/PlasmaUTXOs.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"PlasmaUTXOs"},"Classes/PlasmaURLs.html#/init()":{"name":"init()","parent_name":"PlasmaURLs"},"Classes/PlasmaService.html#/init()":{"name":"init()","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/getUTXOs(for:onTestnet:)":{"name":"getUTXOs(for:onTestnet:)","abstract":"<p>Getting list of available UTXOs for the Ethereum address.</p>","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/getUTXOsPromise(for:onTestnet:)":{"name":"getUTXOsPromise(for:onTestnet:)","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/getBlock(onTestnet:number:)":{"name":"getBlock(onTestnet:number:)","abstract":"<p>Getting Plasma Block by its number.</p>","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/getBlockPromise(onTestnet:number:)":{"name":"getBlockPromise(onTestnet:number:)","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/sendRawTXPromise(transaction:onTestnet:)":{"name":"sendRawTXPromise(transaction:onTestnet:)","parent_name":"PlasmaService"},"Classes/PlasmaService.html#/sendRawTX(transaction:onTestnet:)":{"name":"sendRawTX(transaction:onTestnet:)","abstract":"<p>Sending transaction in Plasma.</p>","parent_name":"PlasmaService"},"Classes/TreeHasher.html#/hash(_:)":{"name":"hash(_:)","abstract":"<p>Hash some data</p>","parent_name":"TreeHasher"},"Classes/TreeHasher.html#/hashFunction":{"name":"hashFunction","abstract":"<p>Hash function</p>","parent_name":"TreeHasher"},"Classes/TreeHasher.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Create TreeHasher object with some hash function</p>","parent_name":"TreeHasher"},"Classes/TreeHasher.html#/init()":{"name":"init()","abstract":"<p>Create TreeHasher object with Keccak hash function</p>","parent_name":"TreeHasher"},"Classes/TreeNode.html#/description":{"name":"description","parent_name":"TreeNode"},"Classes/TreeNode.html#/init(_:hasher:)":{"name":"init(_:hasher:)","parent_name":"TreeNode"},"Classes/TreeNode.html#/init(_:_:hasher:)":{"name":"init(_:_:hasher:)","parent_name":"TreeNode"},"Classes/TreeNode.html#/isLeaf":{"name":"isLeaf","parent_name":"TreeNode"},"Classes/TreeNode.html#/data":{"name":"data","parent_name":"TreeNode"},"Classes/TreeNode.html#/hasher":{"name":"hasher","parent_name":"TreeNode"},"Classes/TreeNode.html#/leftChild":{"name":"leftChild","parent_name":"TreeNode"},"Classes/TreeNode.html#/rightChild":{"name":"rightChild","parent_name":"TreeNode"},"Classes/TreeNode.html#/parent":{"name":"parent","parent_name":"TreeNode"},"Classes/TreeNode.html#/isEqualTo(_:)":{"name":"isEqualTo(_:)","parent_name":"TreeNode"},"Classes/TreeNode.html#/getHash(_:)":{"name":"getHash(_:)","parent_name":"TreeNode"},"Classes/Block.html#/blockHeader":{"name":"blockHeader","parent_name":"Block"},"Classes/Block.html#/signedTransactions":{"name":"signedTransactions","parent_name":"Block"},"Classes/Block.html#/merkleTree":{"name":"merkleTree","abstract":"<p>Merkle tree of transactions in this Block</p>","parent_name":"Block"},"Classes/Block.html#/data":{"name":"data","abstract":"<p>Returns serialized Block</p>","parent_name":"Block"},"Classes/Block.html#/init(blockHeader:signedTransactions:)":{"name":"init(blockHeader:signedTransactions:)","abstract":"<p>Creates Block object that implement Plasma Block in storage</p>","parent_name":"Block"},"Classes/Block.html#/init(data:)":{"name":"init(data:)","abstract":"<p>Creates Block object that implement Plasma Block in storage</p>","parent_name":"Block"},"Classes/Block.html#/serialize()":{"name":"serialize()","abstract":"<p>Serializes Block</p>","parent_name":"Block"},"Classes/Block.html#/getProof(for:)":{"name":"getProof(for:)","abstract":"<p>Proves that the transaction is in this Block transactions set</p>","parent_name":"Block"},"Classes/Block.html#/getProofForTransactionByNumber(txNumber:)":{"name":"getProofForTransactionByNumber(txNumber:)","abstract":"<p>Proves that the transaction is in this Block transactions set</p>","parent_name":"Block"},"Classes/Block.html#/==(_:_:)":{"name":"==(_:_:)","parent_name":"Block"},"Classes/Block.html":{"name":"Block","abstract":"<p>Plasma Block in storage</p>"},"Classes/TreeNode.html":{"name":"TreeNode"},"Classes/TreeHasher.html":{"name":"TreeHasher","abstract":"<p>Tree hasher class for hashing some data</p>"},"Classes/PlasmaService.html":{"name":"PlasmaService","abstract":"<p>A service that provides in-Plasma operations</p>"},"Classes/PlasmaURLs.html":{"name":"PlasmaURLs","abstract":"<p>Common URLs used in requests to Plasma</p>"},"Classes/PlasmaUTXOs.html":{"name":"PlasmaUTXOs","abstract":"<p>A Plasma UTXO implementation and its convenient methods</p>"},"Classes/Web3Service.html":{"name":"Web3Service","abstract":"<p>Methods for Plasma Contract interaction</p>"},"Classes/Transaction.html":{"name":"Transaction","abstract":"<p>An RLP encoded set that describes unsigned Transaction</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Global Variables.html":{"name":"Global Variables","abstract":"<p>The following global variables are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}